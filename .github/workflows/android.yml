name: Android CI

on:
  schedule:
    # UTC+8 at AM 02:45 on every 5th day-of-month
    # to make the cache available always (7d)
    - cron: '45 18 */5 * *'
  #push:
  workflow_dispatch:
    inputs:
      flavor:
        type: choice
        description: Flavor
        required: true
        default: Arm64_SDK23
        options:
          - Arm64_SDK23
          - Armv7_SDK23
          - X64_SDK23
          - X86_SDK23
          - Afat
      build_type:
        type: choice
        description: Build type
        required: true
        default: Standalone
        options:
          - Debug
          - HA
          - Release
          - Standalone
      only_cache:
        type: boolean
        description: Only for cache?
        required: true
        default: false
      upload:
        type: boolean
        description: Upload app?
        required: true
        default: false
      up_to_tg:
        type: boolean
        description: Send to Telegram?
        required: true
        default: false

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || contains(join(github.event.commits.*.message), 'Update to')
    env:
      FLAVOR: ${{ github.event.inputs.flavor }}
      BUILD_TYPE: ${{ github.event.inputs.build_type }}
      UPLOAD: ${{ github.event.inputs.upload }}
      SEND_TO_TG: ${{ github.event.inputs.up_to_tg }}
      ONLY_CACHE: ${{ github.event_name == 'schedule' || github.event.inputs.only_cache }}
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: true
      CCACHE_MAXSIZE: 1G

    steps:
      - name: Clone
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 11
          cache: 'gradle'

      - name: Check event
        run: |
          flag="${{ contains(join(github.event.commits.*.message), 'Update to') || contains(join(github.event.commits.*.message), 'update to') }}"
          if [ "$flag" = "true" ]; then
            echo "Found new version, build release now."
            echo "FLAVOR=Arm64_SDK23" >> $GITHUB_ENV
            echo "BUILD_TYPE=Standalone" >> $GITHUB_ENV
            echo "UPLOAD=false" >> $GITHUB_ENV
            echo "SEND_TO_TG=true" >> $GITHUB_ENV
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        if: env.SEND_TO_TG == 'true'
        with:
          python-version: '3.9.x'

      - name: Prepare Python packages
        if: env.SEND_TO_TG == 'true'
        run: |
          pip install -U wheel
          pip install -U pyrogram tgcrypto

      - name: Init some environments
        run: |
          ffc=${FLAVOR:0:1};bfc=${BUILD_TYPE:0:1}
          echo "FLAVOR_L=${ffc,,}${FLAVOR:1}" >> $GITHUB_ENV
          echo "BUILD_TYPE_L=${bfc,,}${BUILD_TYPE:1}" >> $GITHUB_ENV
          echo "VERSION=`awk -F "=" '$1 == "APP_VERSION_NAME" {print $2}' gradle.properties`" >> $GITHUB_ENV
          echo "VERSION_CODE=`awk -F "=" '$1 == "APP_VERSION_CODE" {print $2}' gradle.properties`" >> $GITHUB_ENV

      - name: Save apk path
        run: |
          APK="$GITHUB_WORKSPACE/TMessagesProj_App/build/outputs/apk/$FLAVOR_L/$BUILD_TYPE_L/Telegram-v$VERSION-$FLAVOR_L-$BUILD_TYPE_L.apk"
          echo "APK=$APK" >> $GITHUB_ENV

      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-${{ env.FLAVOR }}-${{ env.BUILD_TYPE }}-${{ github.sha }}
          restore-keys: ${{ runner.os }}-${{ env.FLAVOR }}-${{ env.BUILD_TYPE }}

      - name: Cache gradle builds
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches/build-cache-*
          key: gradle-builds-${{ github.sha }}
          restore-keys: gradle-builds

      # for save build time
      - name: Patch build.gradle
        if: ${{ 'A' == 'B' }}
        run: |
          ABI=''
          if [[ $FLAVOR == Arm64* ]]; then
            ABI='arm64-v8a'
          elif [[ $FLAVOR == Armv7* ]]; then
            ABI='armeabi-v7a'
          elif [[ $FLAVOR == X64* ]]; then
            ABI='x86_64'
          elif [[ $FLAVOR == X86* ]]; then
            ABI='x86'
          fi
          if [ -n "$ABI" ]; then
            sed -i "/^[ ]*arguments[ ]\+/a\                abiFilters '$ABI'" ./TMessagesProj/build.gradle
            echo "Only build for abi $ABI."
          fi

      - name: Build with gradle
        if: env.ONLY_CACHE == 'false'
        env:
          API_ID: ${{ secrets.TELEGRAM_API_ID_B }}
          API_HASH: ${{ secrets.TELEGRAM_API_HASH_B }}
          KEYSTORE_URL: ${{ secrets.KEYSTORE_URL }}
        run: |
          bash ./gradlew \
          --no-daemon --build-cache \
          :TMessagesProj_App:assemble$FLAVOR$BUILD_TYPE

      - name: Upload built apk
        if: success() && env.ONLY_CACHE == 'false' && env.UPLOAD == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.FLAVOR }} ${{ env.BUILD_TYPE }} apk
          path: ${{ env.APK }}

      - name: Send to Telegram
        if: env.ONLY_CACHE == 'false' && env.SEND_TO_TG == 'true'
        shell: python
        env:
          API_ID: ${{ secrets.TELEGRAM_API_ID }}
          API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT }}
          CHANNEL_ID: ${{ secrets.TELEGRAM_TO }}
        run: |
          import asyncio
          import os
          from pyrogram import Client
          async def main():
            bot = Client(
              "client",
              in_memory=True,
              api_id=os.environ["API_ID"],
              api_hash=os.environ["API_HASH"],
              bot_token=os.environ["BOT_TOKEN"],
            )
            async with bot:
              flavor = os.environ["FLAVOR"]
              ver_name = os.environ["VERSION"]
              ver_code = os.environ["VERSION_CODE"]
              build_type = os.environ["BUILD_TYPE"]
              channel_id = int(os.environ["CHANNEL_ID"])
              caption = f"{ver_name} ({ver_code})\nFlavor: `{flavor}`\nBuild type: `{build_type}`\n#Telegram #Android"
              document = os.environ["APK"]
              await bot.send_document(
                chat_id=channel_id,
                document=document,
                caption=caption,
              )
          async def wait():
            try:
              await asyncio.wait_for(main(), timeout=600)
            except asyncio.TimeoutError:
              print("message send timeout!!!")
              exit(1)
          asyncio.run(wait())
